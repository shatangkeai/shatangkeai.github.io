<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>做自己喜欢的</title>
  
  
  <link href="http://linyuan.xyz/atom.xml" rel="self"/>
  
  <link href="http://linyuan.xyz/"/>
  <updated>2022-03-18T16:01:01.466Z</updated>
  <id>http://linyuan.xyz/</id>
  
  <author>
    <name>砂糖</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二分算法与贪心</title>
    <link href="http://linyuan.xyz/posts/123456.html"/>
    <id>http://linyuan.xyz/posts/123456.html</id>
    <published>2022-03-17T16:00:00.000Z</published>
    <updated>2022-03-18T16:01:01.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-M次方根"><a href="#1-M次方根" class="headerlink" title="1.M次方根"></a>1.M次方根</h1><p><strong>题目描述</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">小AA最近在学高等数学，他发现了一道题，求三次根号下 2727。</span><br><span class="line"></span><br><span class="line">现在已知，小AA开始计算，11 的三次方得 11， 22 的三次方得 88 ，33 的三次方得 2727，然后他很高兴的填上了 33。接着他要求 55 次根号下 164164。</span><br><span class="line"></span><br><span class="line">然后他开始 11 的三次方得 11， 22 的三次方得 88 ，33 的三次方得27\cdots27⋯</span><br><span class="line">直到他算到了秃头，也没有找到答案。</span><br><span class="line"></span><br><span class="line">这时一旁的小BB看不下去了，说这题答案又不是个整数。</span><br><span class="line"></span><br><span class="line">小AA震惊，原来如此。</span><br><span class="line"></span><br><span class="line">作为程序高手的小AA，打算设计一个程序用于求解 MM 次跟下 NN 的值。</span><br><span class="line"></span><br><span class="line">但是由于要考虑精度范围，答案必须要保留 77 位小数，三次根号下 2727 都要掰手指的小AA又怎么会设计呢。</span><br><span class="line"></span><br><span class="line">请你帮小AA设计一个程序用于求解 MM 次根号 NN。</span><br><span class="line">**输入描述**：</span><br><span class="line">每组输入的第一行有两个整数 NN 和 MM，数据间用空格隔开。</span><br><span class="line"></span><br><span class="line">1\leq N \leq 10^51≤N≤10 </span><br><span class="line">5</span><br><span class="line"> ，1\leq M \leq 10^21≤M≤10 </span><br><span class="line">2</span><br><span class="line"> ，M &lt; NM&lt;N。</span><br><span class="line"></span><br><span class="line">**输出描述**</span><br><span class="line">输出一个实数表示答案（请保留小数点后 77 位）。</span><br><span class="line"></span><br><span class="line">**输入输出样例**</span><br><span class="line"></span><br><span class="line">27 3</span><br><span class="line"></span><br><span class="line">3.0000000</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><blockquote><p>需要使用实数域二分法：设置eps值，将eps设置为题目所给的精度即可，例如1e-8；划分范围的时候可以把eps加上去，划分区域即可。<br><a href="https://github.com/delishakeai/suanfa">代码</a></p><h1 id="2-分巧克力"><a href="#2-分巧克力" class="headerlink" title="2.分巧克力"></a>2.分巧克力</h1><p>学习到了需要可以把mid中间量设置为(left + right + 1) / 2;<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">标题： 分巧克力</span><br><span class="line"> </span><br><span class="line">    儿童节那天有K位小朋友到小明家做客。小明拿出了珍藏的巧克力招待小朋友们。</span><br><span class="line">    小明一共有N块巧克力，其中第i块是Hi x Wi的方格组成的长方形。</span><br><span class="line"> </span><br><span class="line">    为了公平起见，小明需要从这 N 块巧克力中切出K块巧克力分给小朋友们。切出的巧克力需要满足：</span><br><span class="line"> </span><br><span class="line">    <span class="number">1.</span> 形状是正方形，边长是整数  </span><br><span class="line">    <span class="number">2.</span> 大小相同  </span><br><span class="line"> </span><br><span class="line">例如一块<span class="number">6</span>x5的巧克力可以切出<span class="number">6</span>块<span class="number">2</span>x2的巧克力或者<span class="number">2</span>块<span class="number">3</span>x3的巧克力。</span><br><span class="line"> </span><br><span class="line">当然小朋友们都希望得到的巧克力尽可能大，你能帮小Hi计算出最大的边长是多少么？</span><br><span class="line"> </span><br><span class="line">输入</span><br><span class="line">第一行包含两个整数N和K。(<span class="number">1</span> &lt;= N, K &lt;= <span class="number">100000</span>)  </span><br><span class="line">以下N行每行包含两个整数Hi和Wi。(<span class="number">1</span> &lt;= Hi, Wi &lt;= <span class="number">100000</span>) </span><br><span class="line">输入保证每位小朋友至少能获得一块<span class="number">1</span>x1的巧克力。   </span><br><span class="line"> </span><br><span class="line">输出</span><br><span class="line">输出切出的正方形巧克力最大可能的边长。</span><br><span class="line"> </span><br><span class="line">样例输入：</span><br><span class="line"><span class="number">2</span> <span class="number">10</span>  </span><br><span class="line"><span class="number">6</span> <span class="number">5</span>  </span><br><span class="line"><span class="number">5</span> <span class="number">6</span>  </span><br><span class="line"> </span><br><span class="line">样例输出：</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><br>本体如果使用常规的中间量分值法，则会出现无限循环的情况。<br><a href="https://github.com/delishakeai/suanfa">代码</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-M次方根&quot;&gt;&lt;a href=&quot;#1-M次方根&quot; class=&quot;headerlink&quot; title=&quot;1.M次方根&quot;&gt;&lt;/a&gt;1.M次方根&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;题目描述&lt;/strong&gt;：&lt;br&gt;&lt;figure class=&quot;highlight pla</summary>
      
    
    
    
    <category term="日记" scheme="http://linyuan.xyz/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="心得" scheme="http://linyuan.xyz/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>DFS</title>
    <link href="http://linyuan.xyz/posts/18482.html"/>
    <id>http://linyuan.xyz/posts/18482.html</id>
    <published>2022-03-09T14:00:00.000Z</published>
    <updated>2022-03-09T15:06:45.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-递归实现排列型枚举"><a href="#1-递归实现排列型枚举" class="headerlink" title="1.递归实现排列型枚举"></a>1.递归实现排列型枚举</h1><p><a href="https://www.acwing.com/problem/content/description/96/">题目</a></p><p><strong>思路</strong>：</p><blockquote><p>输入一个数，输出所有的组合<br> 使用DFS进行深度优先搜索，定义一个map数组用来存放所有的位置，第一个hashtable数组判断是否使用过改数字。从第一个位置开始进行递归，分别在第一个位置进行尝试，将其值赋予值之后，把赋予过值的数字就行标记，下次就不使用改数字，在进行DFS后将该数字回溯</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[N];</span><br><span class="line"><span class="keyword">bool</span> hashtable[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index == n + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">map</span>[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(hashtable[i] == <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">map</span>[index] = i;</span><br><span class="line">            hashtable[i] = <span class="literal">true</span>;</span><br><span class="line">            dfs(index + <span class="number">1</span>);</span><br><span class="line">            hashtable[i] = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">map</span>[index] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-递归实现组合型枚举"><a href="#2-递归实现组合型枚举" class="headerlink" title="2.递归实现组合型枚举"></a>2.递归实现组合型枚举</h1><p><a href="https://www.acwing.com/problem/content/95/">题目</a></p><p><strong>思路</strong>：</p><blockquote><p>这题与上一题差不多，要在指定的范围将数据输出按照字典序。定义一个map数组存放数据即可，传入开始下标以及要遍历的数字。遍历过数字直接跳转下一个数字进行遍历，无需判断是否遍历过此数字。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index &gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">map</span>[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">map</span>[index] = i;</span><br><span class="line">        dfs(index + <span class="number">1</span>, i + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">map</span>[index] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">搜索</summary>
    
    
    
    <category term="蓝桥杯" scheme="http://linyuan.xyz/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="数据结构" scheme="http://linyuan.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>油猴+idm破解百度网盘不限速</title>
    <link href="http://linyuan.xyz/posts/56074.html"/>
    <id>http://linyuan.xyz/posts/56074.html</id>
    <published>2022-03-03T04:30:00.000Z</published>
    <updated>2022-03-03T05:16:52.286Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>百度网盘下载不限速<br>首先确定你的浏览器不是什么360等等一些浏览器,使用Edge浏览器或者是谷歌浏览器,接着把默认浏览器改成Edge<img src="https://s2.loli.net/2022/03/03/Fu2Bh5bWH1Vdk4f.png" alt="image.png">如图,接下来就可以开始了</p></blockquote><h1 id="1-下载油猴插件"><a href="#1-下载油猴插件" class="headerlink" title="1.下载油猴插件"></a>1.下载油猴插件</h1><p>  进入Edge扩展中心<br> <img src="https://s2.loli.net/2022/03/03/QhDCMyredUt6J8R.png" alt="image.png"><br> <img src="https://s2.loli.net/2022/03/03/WHf8LtYpje5M4wx.png" alt="image.png"><br> 搜索tampermonkey下载,第二个绿色的<br> <img src="https://s2.loli.net/2022/03/03/J7uhO2aQomL4N1D.png" alt="image.png"></p><h1 id="2-下载百度网盘插件"><a href="#2-下载百度网盘插件" class="headerlink" title="2.下载百度网盘插件"></a>2.下载百度网盘插件</h1><p>   <a href="https://greasyfork.org/zh-CN/scripts/418182-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%AE%80%E6%98%93%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B-%E7%9B%B4%E9%93%BE%E4%B8%8B%E8%BD%BD%E5%A4%8D%E6%B4%BB%E7%89%88">点这里</a>安装</p><h1 id="3-下载idm"><a href="#3-下载idm" class="headerlink" title="3.下载idm"></a>3.下载idm</h1><p>   <a href="https://wwu.lanzout.com/itPzc00xd48j">点这里下载</a><br>   解压出来,点击绿化即可<br>   <img src="https://s2.loli.net/2022/03/03/exrZSptwGQCfzAV.png" alt="image.png"></p><ol><li>配置idm,进入idm页面,点击菜单栏:下载-&gt;选项-&gt;下载<img src="https://s2.loli.net/2022/03/03/6xTDBAFKOGsCJuU.png" alt="image.png"></li><li>配置最后一行的ua:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netdisk;7.0.3.2;PC;PC-Windows;10.0.17763</span><br></pre></td></tr></table></figure>替换即可</li><li>点击连接<br> <img src="https://s2.loli.net/2022/03/03/TOhH5QFmgfXyKwp.png" alt="image.png">将默认最大连接数改为4即可</li></ol><h1 id="4-进入百度网盘网页版"><a href="#4-进入百度网盘网页版" class="headerlink" title="4. 进入百度网盘网页版"></a>4. 进入百度网盘网页版</h1><p><img src="https://s2.loli.net/2022/03/03/WzDRtL1C2OxXFVc.png" alt="image.png"><br>出现简易下载助手就成功了,下载就是点击要下载的文件,注意一次只能选择一个文件(不包括文件夹)<br><img src="https://s2.loli.net/2022/03/03/YITNydAcBSU6bEi.png" alt="image.png"><br><img src="https://s2.loli.net/2022/03/03/oJf2kOwR6cZmYXU.png" alt="image.png"><br>点击复制直链地址,进入idm页面,点击新建任务,点击确定,点击下载即可完成</p>]]></content>
    
    
    <summary type="html">百度网盘破解</summary>
    
    
    
    <category term="软件" scheme="http://linyuan.xyz/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="网盘" scheme="http://linyuan.xyz/tags/%E7%BD%91%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>动态规划（－）</title>
    <link href="http://linyuan.xyz/posts/48128.html"/>
    <id>http://linyuan.xyz/posts/48128.html</id>
    <published>2022-03-02T14:00:00.000Z</published>
    <updated>2022-03-03T05:01:41.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-拦截导弹"><a href="#1-拦截导弹" class="headerlink" title="1.拦截导弹"></a>1.拦截导弹</h1><p><a href="http://bailian.openjudge.cn/practice/2945/">拦截导弹</a></p><p><strong>思路</strong>：<br>题目的中表示每一次的高度不得超过前一发的高度，所以我们要寻找的就是一行数组的最大下降长度,</p><p><strong>代码</strong>：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 26</span></span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">int</span> num[MAX];</span><br><span class="line"><span class="keyword">int</span> numk[MAX] = &#123;<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num[i];</span><br><span class="line">        numk[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>  i = <span class="number">1</span>; i &lt; k; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(num[j] &gt;= num[i])</span><br><span class="line">                numk[i] = max(numk[j] + <span class="number">1</span>, numk[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; * max_element(numk, numk + k) ;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">动态规划</summary>
    
    
    
    <category term="蓝桥杯" scheme="http://linyuan.xyz/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="数据结构" scheme="http://linyuan.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="http://linyuan.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之二分算法</title>
    <link href="http://linyuan.xyz/posts/13363.html"/>
    <id>http://linyuan.xyz/posts/13363.html</id>
    <published>2022-02-19T13:00:00.000Z</published>
    <updated>2022-03-02T12:46:59.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-二分算法"><a href="#1-二分算法" class="headerlink" title="1. 二分算法"></a>1. 二分算法</h1><blockquote><p>通过左右相互逼进来取得更加精准的答案,同时比普通的查询更加快速,但是前提必须是要区间是递减或者递增的</p><h1 id="2-例题"><a href="#2-例题" class="headerlink" title="2.例题"></a>2.例题</h1><h2 id="1-Aggressive-cows"><a href="#1-Aggressive-cows" class="headerlink" title="1.Aggressive cows"></a>1.Aggressive cows</h2><p><a href="http://cxsjsxmooc.openjudge.cn/2022t2winter/007/">Aggressive cows</a><br>题目大致意思:将奶牛放入摊位中,使它们的距离变得尽可能的小<br><strong>思路</strong>:<br>首先将输入的摊位的位置排序,因为要使用二分法必须保证有序,用最大最小的值作为区间边界值,进行二分即可<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100001</span></span><br><span class="line"><span class="keyword">int</span> a[N], n, m;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">nai</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = a[<span class="number">0</span>], count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span>(a[i] - t &gt;= k)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            t = a[i];</span><br><span class="line">            <span class="keyword">if</span>(count == m)  <span class="comment">//如果相同即可表示该位置可以,进行下一个位置的判断</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    sort(a, a + n);</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = a[n - <span class="number">1</span>] - a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> mid = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)</span><br><span class="line">    &#123;</span><br><span class="line">        mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nai(mid))</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; left - <span class="number">1</span>;   </span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    
    <summary type="html">二分算法</summary>
    
    
    
    <category term="蓝桥杯" scheme="http://linyuan.xyz/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="数据结构" scheme="http://linyuan.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="http://linyuan.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
