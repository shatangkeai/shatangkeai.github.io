<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>做自己喜欢的</title>
  
  
  <link href="http://linyunshen.xyz/atom.xml" rel="self"/>
  
  <link href="http://linyunshen.xyz/"/>
  <updated>2022-02-16T01:05:03.099Z</updated>
  <id>http://linyunshen.xyz/</id>
  
  <author>
    <name>砂糖</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>爬虫获取网站图片</title>
    <link href="http://linyunshen.xyz/posts/53772.html"/>
    <id>http://linyunshen.xyz/posts/53772.html</id>
    <published>2022-02-10T14:00:00.000Z</published>
    <updated>2022-02-16T01:05:03.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬虫爬取网站图片"><a href="#爬虫爬取网站图片" class="headerlink" title="爬虫爬取网站图片"></a>爬虫爬取网站图片</h1><blockquote><p>通过简单的代码来爬取网站的图片</p><ol><li>首先要导入requests库<br> 如果没有此库,需要安装 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure></li><li>选取要爬取的网站页面<br> 使用get函数获取网站的代码<br>3.导入正则表达式库<br> 使用正则表达式来匹配我们要爬取图片的页面图片代码<br> 例如<br> <img src="https://s2.loli.net/2022/02/10/UAGVXI2haC9K4ZR.png" alt="屏幕截图 2022-02-10 221716.png"></li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests  <span class="comment"># 导入请求库</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">reponse = requests.get(<span class="string">&#x27;https://taotuhome.com/15182.html&#x27;</span>)</span><br><span class="line"><span class="comment"># print(reponse.request.headers)</span></span><br><span class="line">html = reponse.text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析网页</span></span><br><span class="line">dir_name = re.findall(<span class="string">&#x27;&lt;h1 class=&quot;entry-title&quot;&gt;(.*?)&lt;/h1&gt;&#x27;</span>, html)[-<span class="number">1</span>] <span class="comment">#获取图片的标题,需要根据你浏览器的代码决定</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dir_name):    <span class="comment"># 导入os库,检测是否由该文件夹名称,创建</span></span><br><span class="line">    os.mkdir(dir_name)</span><br><span class="line"></span><br><span class="line">urls = re.findall(<span class="string">&#x27;&lt;img src=&quot;(.*?)&quot; alt=&quot;.*?&quot; alt=&quot;.*?&quot; class=&quot;.*?&quot;&gt;&#x27;</span>, html) <span class="comment"># 网站的图片外联用(.*?)进行匹配,其余一律改为.*?即可</span></span><br><span class="line">print(dir_name)</span><br><span class="line">print(urls)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">    time.sleep(<span class="number">1</span>) <span class="comment">#爬取时有间隔的爬</span></span><br><span class="line">    <span class="comment"># 图片名字</span></span><br><span class="line">    file_name = url.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]  <span class="comment"># 获取网站图片的名称,例如ybqvavukhcaybqvavukhca.jpg</span></span><br><span class="line">    reponse = requests.get(url)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(dir_name + <span class="string">&#x27;/&#x27;</span> + file_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f: <span class="comment"># 将下载的图片保存在文件夹中</span></span><br><span class="line">        f.write(reponse.content)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">个人爬爬</summary>
    
    
    
    <category term="爬虫" scheme="http://linyunshen.xyz/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="技术" scheme="http://linyunshen.xyz/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>免费虚拟主机搭建wordpress博客</title>
    <link href="http://linyunshen.xyz/posts/55184.html"/>
    <id>http://linyunshen.xyz/posts/55184.html</id>
    <published>2022-02-05T13:30:00.000Z</published>
    <updated>2022-02-16T01:05:03.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-免费虚拟主机"><a href="#1-免费虚拟主机" class="headerlink" title="1.免费虚拟主机"></a>1.免费虚拟主机</h1><p><a href="https://profreehost.com/">https://profreehost.com/</a></p><blockquote><p>使用谷歌浏览器会好一点<br>注册登入</p><h1 id="2-创建博客"><a href="#2-创建博客" class="headerlink" title="2.创建博客"></a>2.创建博客</h1><ol><li>点击 create new account<br> <img src="https://s2.loli.net/2022/02/05/pWl1UinJCQPwYTR.png" alt="屏幕截图 2022-02-05 213520.png"><br> 选择自己的域名并且注册</li><li>注册成功之后回到刚才的页面,点击manage<br><img src="https://s2.loli.net/2022/02/05/6h8f1jFbG7aevSw.png" alt="屏幕截图 2022-02-05 213920.png"><br>点击control panel,会进入你的控制面板</li><li>选择功能<br> <img src="https://s2.loli.net/2022/02/05/2SPJtEqK3Ygae5D.png" alt="屏幕截图 2022-02-05 214049.png">点击第三个,进入安装wordpress<br> <img src="https://s2.loli.net/2022/02/05/yScuxlojDkRgBH4.png" alt="屏幕截图 2022-02-05 214352.png"><br> 可以看到有很多博客系统,选择wordpress进行安装<br> <img src="https://s2.loli.net/2022/02/05/FOSV57QfvjoPNKh.png" alt="屏幕截图 2022-02-05 214551.png"><br> 选择http://<br> admin account 里是你创建好博客之后的后台管理用户名以及密码,要牢记<br> 最后点击安装即可,之后会出现两个链接,分别是你的博客网站以及博客的后台界面,博客就创建完成了,之后就可以愉快的写博客了<br><a href="http://delisha.ezyro.com/">http://delisha.ezyro.com/</a><br>博客演示站</li></ol></blockquote>]]></content>
    
    
    <summary type="html">博客搭建</summary>
    
    
    
    <category term="博客" scheme="http://linyunshen.xyz/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="虚拟空间" scheme="http://linyunshen.xyz/tags/%E8%99%9A%E6%8B%9F%E7%A9%BA%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之递归(二)</title>
    <link href="http://linyunshen.xyz/posts/48475.html"/>
    <id>http://linyunshen.xyz/posts/48475.html</id>
    <published>2022-02-04T13:26:00.000Z</published>
    <updated>2022-02-16T01:05:03.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="1-表达式求值"><a href="#1-表达式求值" class="headerlink" title="1.表达式求值"></a>1.表达式求值</h2><p><strong>题目描述</strong>:</p><blockquote><p>输入为四则运算表达式，仅由数字、+、-、<em>、/、(、)组成，没有空格，要求求其值。假设运算符结果都是整数。”/“结果也是整数<br><em>*思路</em></em>:<br>将表达式分为3个部分</p><ol><li>表达式是由项构成的,项的加减构成项</li><li>项时由一些因子所组成,因子的乘除构成项</li><li>因子则是由括号加表达式,或者是单独的一个整数所组成<br>程序就可以分为3个递归小程序<br><strong>代码</strong>:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">factor_value</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">trem_value</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">expression_value</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; expression_value() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">expression_value</span><span class="params">()</span> <span class="comment">//求表达式的值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = trem_value();</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">        <span class="keyword">char</span> ch = <span class="built_in">cin</span>.peek();</span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span> || ch == <span class="string">&#x27;+&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">cin</span>.get();</span><br><span class="line">            <span class="keyword">int</span> value = trem_value();</span><br><span class="line">            <span class="keyword">if</span>(ch == <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">                result += value;</span><br><span class="line">            <span class="keyword">else</span>    </span><br><span class="line">                result -=value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">trem_value</span><span class="params">()</span><span class="comment">//求因子的值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = factor_value();</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">char</span> ch = <span class="built_in">cin</span>.peek();</span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">&#x27;*&#x27;</span> || ch == <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">cin</span>.get();</span><br><span class="line">            <span class="keyword">int</span> value = factor_value();</span><br><span class="line">            <span class="keyword">if</span>(ch == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                result *= value;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                result /= value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">factor_value</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">cin</span>.peek();</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">cin</span>.get();</span><br><span class="line">        result = expression_value();</span><br><span class="line">        <span class="built_in">cin</span>.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))&#123;  <span class="comment">//判断是否为运算符号</span></span><br><span class="line">            result = <span class="number">10</span> * result + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="built_in">cin</span>.get();  <span class="comment">//读取字符串下一个并且删除该字符</span></span><br><span class="line">            c = <span class="built_in">cin</span>.peek(); <span class="comment">//不删除,只读取</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-上台阶"><a href="#2-上台阶" class="headerlink" title="2.上台阶"></a>2.上台阶</h2>链接<a href="http://noi.openjudge.cn/ch0203/3525/">上台阶</a><br><strong>思路</strong>:<br>第一次走1级,之后就有n-1级的走法,第一次二级就有n-2级的走法,以此可以看出n级台阶的走法为$n=f(n-1)+f(n-2)+f(n-3)$<br>递归终止条件则是<br>. 当n&lt;0时,就没有路可走<br>. n=\=0时代表还有一种走法就是不走<br>. n==1也是还有一种走法<br><strong>代码</strong>:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sta</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sta(n - <span class="number">1</span>) + sta(n - <span class="number">2</span>) + sta(n - <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; N )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(N == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sta(N) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-放苹果"><a href="#3-放苹果" class="headerlink" title="3.放苹果"></a>3.放苹果</h2><strong>题目</strong>:<a href="http://noi.openjudge.cn/ch0203/666/">放苹果</a><br><strong>思路</strong>:<br>m个苹果放入n个盘子</li><li>当盘子比苹果多,就可以等价于吧m个苹果放入m个盘子中了</li><li>其余的情况可以看成有盘子为空的放法和没盘子为空的放法<br>终止条件,盘子为0时,就没有情况,苹果为0时,就只有一种情况<br><strong>代码</strong>:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; m)</span><br><span class="line">        <span class="keyword">return</span> f(m ,m);</span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> f(m, n - <span class="number">1</span>) + f(m - n, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, m, n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; f(m, n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-算24"><a href="#4-算24" class="headerlink" title="4.算24"></a>4.算24</h2><strong>题目</strong>:<a href="http://noi.openjudge.cn/ch0205/1789/">算24</a><br><strong>思路</strong>:<br>递归部分,将n个数算24,就是先算两个数,把结果也另外n-2个数分别就行运算,把算算的两个数分别进行不同的运算方式,进行递归,即可<br>终止条件则是当数组内只有一个时判断是否为结果即可<br><strong>代码</strong>:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EPS 1e-6</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isZero</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(x) &lt;= EPS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">count</span><span class="params">(<span class="keyword">double</span> sum[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isZero(sum[<span class="number">0</span>] - <span class="number">24</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> b[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//把sum数组的元素复制给b数组,递归b数组</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(k != i &amp;&amp; k != j)</span><br><span class="line">                    b[m++] = sum[k];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//枚举各种运算方式</span></span><br><span class="line">            b[m] = sum[i] + sum[j];</span><br><span class="line">            <span class="keyword">if</span>(count(b, m + <span class="number">1</span>))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            b[m] = sum[i] - sum[j];</span><br><span class="line">            <span class="keyword">if</span>(count(b, m + <span class="number">1</span>))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">            b[m] = sum[j] - sum[i];</span><br><span class="line">            <span class="keyword">if</span>(count(b, m + <span class="number">1</span>))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;   </span><br><span class="line">            b[m] = sum[j] * sum[i];</span><br><span class="line">            <span class="keyword">if</span>(count(b, m + <span class="number">1</span>))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(!isZero(sum[j]))&#123;</span><br><span class="line">                b[m] = sum[i] / sum[j];</span><br><span class="line">                <span class="keyword">if</span>(count(b, m + <span class="number">1</span>))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!isZero(sum[i]))&#123;</span><br><span class="line">                b[m] = sum[j] / sum[i];</span><br><span class="line">                <span class="keyword">if</span>(count(b, m + <span class="number">1</span>))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isZero(a[<span class="number">0</span>]))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(count(a, <span class="number">4</span>))</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    
    <summary type="html">递归算法</summary>
    
    
    
    <category term="蓝桥杯" scheme="http://linyunshen.xyz/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="数据结构" scheme="http://linyunshen.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="http://linyunshen.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之递归(-)</title>
    <link href="http://linyunshen.xyz/posts/30787.html"/>
    <id>http://linyunshen.xyz/posts/30787.html</id>
    <published>2022-02-02T16:00:00.000Z</published>
    <updated>2022-02-16T01:05:03.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-递归是什么"><a href="#一-递归是什么" class="headerlink" title="一.递归是什么"></a>一.递归是什么</h1><p>一个函数调用本身就是递归</p><h1 id="二-递归例题"><a href="#二-递归例题" class="headerlink" title="二.递归例题"></a>二.递归例题</h1><h2 id="1-汉诺塔问题"><a href="#1-汉诺塔问题" class="headerlink" title="1.汉诺塔问题"></a>1.汉诺塔问题</h2><p><a href="http://noi.openjudge.cn/ch0202/6261/">汉诺塔</a><br><strong>输入</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 a b c</span><br></pre></td></tr></table></figure><br><strong>输出</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a-&gt;1-&gt;c</span><br><span class="line">a-&gt;2-&gt;b</span><br><span class="line">c-&gt;1-&gt;b</span><br></pre></td></tr></table></figure><br><strong>思路</strong>:<br>递归的问题找递归部分以及递归终止条件<br>递归部分为将n-1个盘子从A移到B,后将最后一个移到C盘,最后将B的盘子移到C盘<br>终止条件则是盘子数为1时终止递归<br><strong>代码</strong>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hano</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">char</span> a,<span class="keyword">char</span> c,<span class="keyword">char</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c-&gt;%d-&gt;%c\n&quot;</span>,a,n,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        hano(n<span class="number">-1</span>,a,b,c);    </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c-&gt;%d-&gt;%c\n&quot;</span>,a,n,b);  </span><br><span class="line">        hano(n<span class="number">-1</span>,c,a,b);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> n;</span><br><span class="line">   <span class="keyword">char</span> a,b,c;</span><br><span class="line">   <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">   hano(n,a,c,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-N皇后"><a href="#2-N皇后" class="headerlink" title="2.N皇后"></a>2.N皇后</h2><p><strong>题目</strong>:</p><blockquote><p>n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。输入一个正整数N，则程序输出N皇后问题的全部摆法。输出结果里的每一行都代表一种摆法。行里的第i个数字如果是n，就代表第i行的皇后应该放在第n列。<br><strong>输入</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><br><strong>输出</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 4 1 3</span><br></pre></td></tr></table></figure><br><strong>思路</strong>:<br>递归部分:<br>从第一行开始遍历,一步步尝试位置上是否可以放置皇后位置,判断的条件则是遍历已经排好位置的皇后,如果相同则跳出循环,尝试另外一个位置,直到有位置可以放置,如果没有则代表此路线无法进行下去,则会自动停止,如果有将位置给改皇后,进行下一次递归<br>终止条件:<br>改数字等于皇后的个数,输出<br><strong>代码</strong>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> queues[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NQue</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k == N)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; queues[i] + <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; k; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(queues[j] == i || <span class="built_in">abs</span>(queues[j] - i) == <span class="built_in">abs</span>(k - j))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j == k)&#123;</span><br><span class="line">                queues[k] = i;</span><br><span class="line">                NQue(k + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    NQue(<span class="number">0</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-逆波兰表达式"><a href="#3-逆波兰表达式" class="headerlink" title="3.逆波兰表达式"></a>3.逆波兰表达式</h2><p><strong>题目</strong>:<br>逆波兰表达式是一种把运算符前置的算末表达式，例如普通的表达式2＋3的逆波兰表示法为+2 3。逆波兰表达式的优点是运算符之间不必有优先级关系，也不必用括号改变运算次序，例如(2+3)*4的逆波兰表示法为*＋2 3 4。本题求解逆波兰表达式的值，其中运算符包括+―<em>/四个。<br><strong>输入</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* + 11.0 12.0 + 24.0 35.0</span><br></pre></td></tr></table></figure><br><strong>输出</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1357</span><br></pre></td></tr></table></figure><br><strong>思路</strong>:<br>递归<br>  输入一个字符,判断是否为运算符号,如果是则进行运算,而运算的部分进行数字递归,数字部分则返回该数字.<br><em>*代码</em></em>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//* + 11.0 12.0 + 24.0 35.0</span></span><br><span class="line"><span class="comment">//1357</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">ecp</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">switch</span>(s[<span class="number">0</span>])&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: <span class="keyword">return</span> ecp() * ecp();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: <span class="keyword">return</span> ecp() / ecp();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: <span class="keyword">return</span> ecp() + ecp();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: <span class="keyword">return</span> ecp() - ecp();</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">return</span> atof(s);    <span class="comment">//atof()函数是将字符类型转换为double类型</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%1f&quot;</span>, ecp());</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    
    <summary type="html">递归算法</summary>
    
    
    
    <category term="蓝桥杯" scheme="http://linyunshen.xyz/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="数据结构" scheme="http://linyunshen.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="http://linyunshen.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>hexo一些插件部署命令</title>
    <link href="http://linyunshen.xyz/posts/51148.html"/>
    <id>http://linyunshen.xyz/posts/51148.html</id>
    <published>2022-01-30T16:00:00.000Z</published>
    <updated>2022-02-16T01:05:03.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-哔哩哔哩插件部署代码"><a href="#1-哔哩哔哩插件部署代码" class="headerlink" title="1.哔哩哔哩插件部署代码"></a>1.哔哩哔哩插件部署代码</h1><blockquote><p>要在hexo g或者hexo deploy前执行</p><ol><li>更新数据 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo bangumi -u</span><br></pre></td></tr></table></figure></li><li>删除数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo bangumi -d</span><br></pre></td></tr></table></figure><h1 id="2-搜索引擎布置"><a href="#2-搜索引擎布置" class="headerlink" title="2.搜索引擎布置"></a>2.搜索引擎布置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo algolia</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    
    <summary type="html">部署代码</summary>
    
    
    
    <category term="博客" scheme="http://linyunshen.xyz/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="hexo插件" scheme="http://linyunshen.xyz/tags/hexo%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
</feed>
