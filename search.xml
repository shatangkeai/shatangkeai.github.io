<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>油猴+idm破解百度网盘不限速</title>
      <link href="posts/56074.html"/>
      <url>posts/56074.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>百度网盘下载不限速<br>首先确定你的浏览器不是什么360等等一些浏览器,使用Edge浏览器或者是谷歌浏览器,接着把默认浏览器改成Edge<img src="https://s2.loli.net/2022/03/03/Fu2Bh5bWH1Vdk4f.png" alt="image.png">如图,接下来就可以开始了</p></blockquote><h1 id="1-下载油猴插件"><a href="#1-下载油猴插件" class="headerlink" title="1.下载油猴插件"></a>1.下载油猴插件</h1><p>  进入Edge扩展中心<br> <img src="https://s2.loli.net/2022/03/03/QhDCMyredUt6J8R.png" alt="image.png"><br> <img src="https://s2.loli.net/2022/03/03/WHf8LtYpje5M4wx.png" alt="image.png"><br> 搜索tampermonkey下载,第二个绿色的<br> <img src="https://s2.loli.net/2022/03/03/J7uhO2aQomL4N1D.png" alt="image.png"></p><h1 id="2-下载百度网盘插件"><a href="#2-下载百度网盘插件" class="headerlink" title="2.下载百度网盘插件"></a>2.下载百度网盘插件</h1><p>   <a href="https://greasyfork.org/zh-CN/scripts/418182-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%AE%80%E6%98%93%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B-%E7%9B%B4%E9%93%BE%E4%B8%8B%E8%BD%BD%E5%A4%8D%E6%B4%BB%E7%89%88">点这里</a>安装</p><h1 id="3-下载idm"><a href="#3-下载idm" class="headerlink" title="3.下载idm"></a>3.下载idm</h1><p>   <a href="https://wwu.lanzout.com/itPzc00xd48j">点这里下载</a><br>   解压出来,点击绿化即可<br>   <img src="https://s2.loli.net/2022/03/03/exrZSptwGQCfzAV.png" alt="image.png"></p><ol><li>配置idm,进入idm页面,点击菜单栏:下载-&gt;选项-&gt;下载<img src="https://s2.loli.net/2022/03/03/6xTDBAFKOGsCJuU.png" alt="image.png"></li><li>配置最后一行的ua:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netdisk;7.0.3.2;PC;PC-Windows;10.0.17763</span><br></pre></td></tr></table></figure>替换即可</li><li>点击连接<br> <img src="https://s2.loli.net/2022/03/03/TOhH5QFmgfXyKwp.png" alt="image.png">将默认最大连接数改为4即可</li></ol><h1 id="4-进入百度网盘网页版"><a href="#4-进入百度网盘网页版" class="headerlink" title="4. 进入百度网盘网页版"></a>4. 进入百度网盘网页版</h1><p><img src="https://s2.loli.net/2022/03/03/WzDRtL1C2OxXFVc.png" alt="image.png"><br>出现简易下载助手就成功了,下载就是点击要下载的文件,注意一次只能选择一个文件(不包括文件夹)<br><img src="https://s2.loli.net/2022/03/03/YITNydAcBSU6bEi.png" alt="image.png"><br><img src="https://s2.loli.net/2022/03/03/oJf2kOwR6cZmYXU.png" alt="image.png"><br>点击复制直链地址,进入idm页面,点击新建任务,点击确定,点击下载即可完成</p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划（－）</title>
      <link href="posts/48128.html"/>
      <url>posts/48128.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-拦截导弹"><a href="#1-拦截导弹" class="headerlink" title="1.拦截导弹"></a>1.拦截导弹</h1><p><a href="http://bailian.openjudge.cn/practice/2945/">拦截导弹</a></p><p><strong>思路</strong>：<br>题目的中表示每一次的高度不得超过前一发的高度，所以我们要寻找的就是一行数组的最大下降长度,</p><p><strong>代码</strong>：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 26</span></span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">int</span> num[MAX];</span><br><span class="line"><span class="keyword">int</span> numk[MAX] = &#123;<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num[i];</span><br><span class="line">        numk[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>  i = <span class="number">1</span>; i &lt; k; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(num[j] &gt;= num[i])</span><br><span class="line">                numk[i] = max(numk[j] + <span class="number">1</span>, numk[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; * max_element(numk, numk + k) ;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之二分算法</title>
      <link href="posts/13363.html"/>
      <url>posts/13363.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-二分算法"><a href="#1-二分算法" class="headerlink" title="1. 二分算法"></a>1. 二分算法</h1><blockquote><p>通过左右相互逼进来取得更加精准的答案,同时比普通的查询更加快速,但是前提必须是要区间是递减或者递增的</p><h1 id="2-例题"><a href="#2-例题" class="headerlink" title="2.例题"></a>2.例题</h1><h2 id="1-Aggressive-cows"><a href="#1-Aggressive-cows" class="headerlink" title="1.Aggressive cows"></a>1.Aggressive cows</h2><p><a href="http://cxsjsxmooc.openjudge.cn/2022t2winter/007/">Aggressive cows</a><br>题目大致意思:将奶牛放入摊位中,使它们的距离变得尽可能的小<br><strong>思路</strong>:<br>首先将输入的摊位的位置排序,因为要使用二分法必须保证有序,用最大最小的值作为区间边界值,进行二分即可<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100001</span></span><br><span class="line"><span class="keyword">int</span> a[N], n, m;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">nai</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = a[<span class="number">0</span>], count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span>(a[i] - t &gt;= k)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            t = a[i];</span><br><span class="line">            <span class="keyword">if</span>(count == m)  <span class="comment">//如果相同即可表示该位置可以,进行下一个位置的判断</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    sort(a, a + n);</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = a[n - <span class="number">1</span>] - a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> mid = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)</span><br><span class="line">    &#123;</span><br><span class="line">        mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nai(mid))</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; left - <span class="number">1</span>;   </span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cloud Drive 云盘挂载本地</title>
      <link href="posts/35414.html"/>
      <url>posts/35414.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Cloud-Drive"><a href="#1-Cloud-Drive" class="headerlink" title="1.Cloud Drive"></a>1.Cloud Drive</h1><blockquote><p>Cloud Drive可以将阿里云盘等一些云盘挂载到本地</p></blockquote><p>链接:<a href="https://wwu.lanzout.com/ipIp800c5h2h">Cloud Drive</a>密码:e6ei<br>例如:<img src="https://s2.loli.net/2022/02/19/mFSRy5aKC6gxekE.png" alt="image.png"></p><h1 id="2-使用Cloud-Drive"><a href="#2-使用Cloud-Drive" class="headerlink" title="2.使用Cloud Drive"></a>2.使用Cloud Drive</h1><p><strong>安装</strong><br><img src="https://s2.loli.net/2022/02/19/UC3IGqymVc29Ou6.png" alt="image.png"><br><strong>选择要挂载的云盘</strong><br><img src="https://s2.loli.net/2022/02/19/pZIMNxSLD8K4sHf.png" alt="image.png"><br>扫码登入即可,<strong>点击上方注册</strong><br><img src="https://s2.loli.net/2022/02/19/o6wqJlDx7NUb42I.png" alt="image.png"><br><strong>选择挂载的盘符</strong><br><img src="https://s2.loli.net/2022/02/19/VB9hg7marOEAX1C.png" alt="image.png"><br>选择改变缓存目录,不要放置C盘,<strong>会炸</strong><br><img src="https://s2.loli.net/2022/02/19/wdQMuyINaK1q9eE.png" alt="image.png"><br>以上设置完即可</p>]]></content>
      
      
      <categories>
          
          <category> 实用软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫获取网站图片</title>
      <link href="posts/53772.html"/>
      <url>posts/53772.html</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫爬取网站图片"><a href="#爬虫爬取网站图片" class="headerlink" title="爬虫爬取网站图片"></a>爬虫爬取网站图片</h1><blockquote><p>通过简单的代码来爬取网站的图片</p><ol><li>首先要导入requests库<br> 如果没有此库,需要安装 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure></li><li>选取要爬取的网站页面<br> 使用get函数获取网站的代码<br>3.导入正则表达式库<br> 使用正则表达式来匹配我们要爬取图片的页面图片代码<br> 例如<br> <img src="https://s2.loli.net/2022/02/10/UAGVXI2haC9K4ZR.png" alt="屏幕截图 2022-02-10 221716.png"></li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests  <span class="comment"># 导入请求库</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">reponse = requests.get(<span class="string">&#x27;https://taotuhome.com/15182.html&#x27;</span>)</span><br><span class="line"><span class="comment"># print(reponse.request.headers)</span></span><br><span class="line">html = reponse.text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析网页</span></span><br><span class="line">dir_name = re.findall(<span class="string">&#x27;&lt;h1 class=&quot;entry-title&quot;&gt;(.*?)&lt;/h1&gt;&#x27;</span>, html)[-<span class="number">1</span>] <span class="comment">#获取图片的标题,需要根据你浏览器的代码决定</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dir_name):    <span class="comment"># 导入os库,检测是否由该文件夹名称,创建</span></span><br><span class="line">    os.mkdir(dir_name)</span><br><span class="line"></span><br><span class="line">urls = re.findall(<span class="string">&#x27;&lt;img src=&quot;(.*?)&quot; alt=&quot;.*?&quot; alt=&quot;.*?&quot; class=&quot;.*?&quot;&gt;&#x27;</span>, html) <span class="comment"># 网站的图片外联用(.*?)进行匹配,其余一律改为.*?即可</span></span><br><span class="line">print(dir_name)</span><br><span class="line">print(urls)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">    time.sleep(<span class="number">1</span>) <span class="comment">#爬取时有间隔的爬</span></span><br><span class="line">    <span class="comment"># 图片名字</span></span><br><span class="line">    file_name = url.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]  <span class="comment"># 获取网站图片的名称,例如ybqvavukhcaybqvavukhca.jpg</span></span><br><span class="line">    reponse = requests.get(url)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(dir_name + <span class="string">&#x27;/&#x27;</span> + file_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f: <span class="comment"># 将下载的图片保存在文件夹中</span></span><br><span class="line">        f.write(reponse.content)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费虚拟主机搭建wordpress博客</title>
      <link href="posts/55184.html"/>
      <url>posts/55184.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-免费虚拟主机"><a href="#1-免费虚拟主机" class="headerlink" title="1.免费虚拟主机"></a>1.免费虚拟主机</h1><p><a href="https://profreehost.com/">https://profreehost.com/</a></p><blockquote><p>使用谷歌浏览器会好一点<br>注册登入</p><h1 id="2-创建博客"><a href="#2-创建博客" class="headerlink" title="2.创建博客"></a>2.创建博客</h1><ol><li>点击 create new account<br> <img src="https://s2.loli.net/2022/02/05/pWl1UinJCQPwYTR.png" alt="屏幕截图 2022-02-05 213520.png"><br> 选择自己的域名并且注册</li><li>注册成功之后回到刚才的页面,点击manage<br><img src="https://s2.loli.net/2022/02/05/6h8f1jFbG7aevSw.png" alt="屏幕截图 2022-02-05 213920.png"><br>点击control panel,会进入你的控制面板</li><li>选择功能<br> <img src="https://s2.loli.net/2022/02/05/2SPJtEqK3Ygae5D.png" alt="屏幕截图 2022-02-05 214049.png">点击第三个,进入安装wordpress<br> <img src="https://s2.loli.net/2022/02/05/yScuxlojDkRgBH4.png" alt="屏幕截图 2022-02-05 214352.png"><br> 可以看到有很多博客系统,选择wordpress进行安装<br> <img src="https://s2.loli.net/2022/02/05/FOSV57QfvjoPNKh.png" alt="屏幕截图 2022-02-05 214551.png"><br> 选择http://<br> admin account 里是你创建好博客之后的后台管理用户名以及密码,要牢记<br> 最后点击安装即可,之后会出现两个链接,分别是你的博客网站以及博客的后台界面,博客就创建完成了,之后就可以愉快的写博客了<br><a href="http://delisha.ezyro.com/">http://delisha.ezyro.com/</a><br>博客演示站</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟空间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之递归(二)</title>
      <link href="posts/48475.html"/>
      <url>posts/48475.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="1-表达式求值"><a href="#1-表达式求值" class="headerlink" title="1.表达式求值"></a>1.表达式求值</h2><p><strong>题目描述</strong>:</p><blockquote><p>输入为四则运算表达式，仅由数字、+、-、<em>、/、(、)组成，没有空格，要求求其值。假设运算符结果都是整数。”/“结果也是整数<br><em>*思路</em></em>:<br>将表达式分为3个部分</p><ol><li>表达式是由项构成的,项的加减构成项</li><li>项时由一些因子所组成,因子的乘除构成项</li><li>因子则是由括号加表达式,或者是单独的一个整数所组成<br>程序就可以分为3个递归小程序<br><strong>代码</strong>:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">factor_value</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">trem_value</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">expression_value</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; expression_value() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">expression_value</span><span class="params">()</span> <span class="comment">//求表达式的值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = trem_value();</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">        <span class="keyword">char</span> ch = <span class="built_in">cin</span>.peek();</span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span> || ch == <span class="string">&#x27;+&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">cin</span>.get();</span><br><span class="line">            <span class="keyword">int</span> value = trem_value();</span><br><span class="line">            <span class="keyword">if</span>(ch == <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">                result += value;</span><br><span class="line">            <span class="keyword">else</span>    </span><br><span class="line">                result -=value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">trem_value</span><span class="params">()</span><span class="comment">//求因子的值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = factor_value();</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">char</span> ch = <span class="built_in">cin</span>.peek();</span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">&#x27;*&#x27;</span> || ch == <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">cin</span>.get();</span><br><span class="line">            <span class="keyword">int</span> value = factor_value();</span><br><span class="line">            <span class="keyword">if</span>(ch == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                result *= value;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                result /= value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">factor_value</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">cin</span>.peek();</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">cin</span>.get();</span><br><span class="line">        result = expression_value();</span><br><span class="line">        <span class="built_in">cin</span>.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))&#123;  <span class="comment">//判断是否为运算符号</span></span><br><span class="line">            result = <span class="number">10</span> * result + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="built_in">cin</span>.get();  <span class="comment">//读取字符串下一个并且删除该字符</span></span><br><span class="line">            c = <span class="built_in">cin</span>.peek(); <span class="comment">//不删除,只读取</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-上台阶"><a href="#2-上台阶" class="headerlink" title="2.上台阶"></a>2.上台阶</h2>链接<a href="http://noi.openjudge.cn/ch0203/3525/">上台阶</a><br><strong>思路</strong>:<br>第一次走1级,之后就有n-1级的走法,第一次二级就有n-2级的走法,以此可以看出n级台阶的走法为$n=f(n-1)+f(n-2)+f(n-3)$<br>递归终止条件则是<br>. 当n&lt;0时,就没有路可走<br>. n=\=0时代表还有一种走法就是不走<br>. n==1也是还有一种走法<br><strong>代码</strong>:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sta</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sta(n - <span class="number">1</span>) + sta(n - <span class="number">2</span>) + sta(n - <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; N )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(N == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sta(N) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-放苹果"><a href="#3-放苹果" class="headerlink" title="3.放苹果"></a>3.放苹果</h2><strong>题目</strong>:<a href="http://noi.openjudge.cn/ch0203/666/">放苹果</a><br><strong>思路</strong>:<br>m个苹果放入n个盘子</li><li>当盘子比苹果多,就可以等价于吧m个苹果放入m个盘子中了</li><li>其余的情况可以看成有盘子为空的放法和没盘子为空的放法<br>终止条件,盘子为0时,就没有情况,苹果为0时,就只有一种情况<br><strong>代码</strong>:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; m)</span><br><span class="line">        <span class="keyword">return</span> f(m ,m);</span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> f(m, n - <span class="number">1</span>) + f(m - n, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, m, n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; f(m, n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-算24"><a href="#4-算24" class="headerlink" title="4.算24"></a>4.算24</h2><strong>题目</strong>:<a href="http://noi.openjudge.cn/ch0205/1789/">算24</a><br><strong>思路</strong>:<br>递归部分,将n个数算24,就是先算两个数,把结果也另外n-2个数分别就行运算,把算算的两个数分别进行不同的运算方式,进行递归,即可<br>终止条件则是当数组内只有一个时判断是否为结果即可<br><strong>代码</strong>:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EPS 1e-6</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isZero</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(x) &lt;= EPS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">count</span><span class="params">(<span class="keyword">double</span> sum[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isZero(sum[<span class="number">0</span>] - <span class="number">24</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> b[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//把sum数组的元素复制给b数组,递归b数组</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(k != i &amp;&amp; k != j)</span><br><span class="line">                    b[m++] = sum[k];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//枚举各种运算方式</span></span><br><span class="line">            b[m] = sum[i] + sum[j];</span><br><span class="line">            <span class="keyword">if</span>(count(b, m + <span class="number">1</span>))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            b[m] = sum[i] - sum[j];</span><br><span class="line">            <span class="keyword">if</span>(count(b, m + <span class="number">1</span>))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">            b[m] = sum[j] - sum[i];</span><br><span class="line">            <span class="keyword">if</span>(count(b, m + <span class="number">1</span>))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;   </span><br><span class="line">            b[m] = sum[j] * sum[i];</span><br><span class="line">            <span class="keyword">if</span>(count(b, m + <span class="number">1</span>))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(!isZero(sum[j]))&#123;</span><br><span class="line">                b[m] = sum[i] / sum[j];</span><br><span class="line">                <span class="keyword">if</span>(count(b, m + <span class="number">1</span>))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!isZero(sum[i]))&#123;</span><br><span class="line">                b[m] = sum[j] / sum[i];</span><br><span class="line">                <span class="keyword">if</span>(count(b, m + <span class="number">1</span>))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isZero(a[<span class="number">0</span>]))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(count(a, <span class="number">4</span>))</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之递归(-)</title>
      <link href="posts/30787.html"/>
      <url>posts/30787.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-递归是什么"><a href="#一-递归是什么" class="headerlink" title="一.递归是什么"></a>一.递归是什么</h1><p>一个函数调用本身就是递归</p><h1 id="二-递归例题"><a href="#二-递归例题" class="headerlink" title="二.递归例题"></a>二.递归例题</h1><h2 id="1-汉诺塔问题"><a href="#1-汉诺塔问题" class="headerlink" title="1.汉诺塔问题"></a>1.汉诺塔问题</h2><p><a href="http://noi.openjudge.cn/ch0202/6261/">汉诺塔</a><br><strong>输入</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 a b c</span><br></pre></td></tr></table></figure><br><strong>输出</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a-&gt;1-&gt;c</span><br><span class="line">a-&gt;2-&gt;b</span><br><span class="line">c-&gt;1-&gt;b</span><br></pre></td></tr></table></figure><br><strong>思路</strong>:<br>递归的问题找递归部分以及递归终止条件<br>递归部分为将n-1个盘子从A移到B,后将最后一个移到C盘,最后将B的盘子移到C盘<br>终止条件则是盘子数为1时终止递归<br><strong>代码</strong>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hano</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">char</span> a,<span class="keyword">char</span> c,<span class="keyword">char</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c-&gt;%d-&gt;%c\n&quot;</span>,a,n,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        hano(n<span class="number">-1</span>,a,b,c);    </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c-&gt;%d-&gt;%c\n&quot;</span>,a,n,b);  </span><br><span class="line">        hano(n<span class="number">-1</span>,c,a,b);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> n;</span><br><span class="line">   <span class="keyword">char</span> a,b,c;</span><br><span class="line">   <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">   hano(n,a,c,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-N皇后"><a href="#2-N皇后" class="headerlink" title="2.N皇后"></a>2.N皇后</h2><p><strong>题目</strong>:</p><blockquote><p>n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。输入一个正整数N，则程序输出N皇后问题的全部摆法。输出结果里的每一行都代表一种摆法。行里的第i个数字如果是n，就代表第i行的皇后应该放在第n列。<br><strong>输入</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><br><strong>输出</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 4 1 3</span><br></pre></td></tr></table></figure><br><strong>思路</strong>:<br>递归部分:<br>从第一行开始遍历,一步步尝试位置上是否可以放置皇后位置,判断的条件则是遍历已经排好位置的皇后,如果相同则跳出循环,尝试另外一个位置,直到有位置可以放置,如果没有则代表此路线无法进行下去,则会自动停止,如果有将位置给改皇后,进行下一次递归<br>终止条件:<br>改数字等于皇后的个数,输出<br><strong>代码</strong>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> queues[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NQue</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k == N)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; queues[i] + <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; k; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(queues[j] == i || <span class="built_in">abs</span>(queues[j] - i) == <span class="built_in">abs</span>(k - j))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j == k)&#123;</span><br><span class="line">                queues[k] = i;</span><br><span class="line">                NQue(k + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    NQue(<span class="number">0</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-逆波兰表达式"><a href="#3-逆波兰表达式" class="headerlink" title="3.逆波兰表达式"></a>3.逆波兰表达式</h2><p><strong>题目</strong>:<br>逆波兰表达式是一种把运算符前置的算末表达式，例如普通的表达式2＋3的逆波兰表示法为+2 3。逆波兰表达式的优点是运算符之间不必有优先级关系，也不必用括号改变运算次序，例如(2+3)*4的逆波兰表示法为*＋2 3 4。本题求解逆波兰表达式的值，其中运算符包括+―<em>/四个。<br><strong>输入</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* + 11.0 12.0 + 24.0 35.0</span><br></pre></td></tr></table></figure><br><strong>输出</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1357</span><br></pre></td></tr></table></figure><br><strong>思路</strong>:<br>递归<br>  输入一个字符,判断是否为运算符号,如果是则进行运算,而运算的部分进行数字递归,数字部分则返回该数字.<br><em>*代码</em></em>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//* + 11.0 12.0 + 24.0 35.0</span></span><br><span class="line"><span class="comment">//1357</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">ecp</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">switch</span>(s[<span class="number">0</span>])&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: <span class="keyword">return</span> ecp() * ecp();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: <span class="keyword">return</span> ecp() / ecp();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: <span class="keyword">return</span> ecp() + ecp();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: <span class="keyword">return</span> ecp() - ecp();</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">return</span> atof(s);    <span class="comment">//atof()函数是将字符类型转换为double类型</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%1f&quot;</span>, ecp());</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo一些插件部署命令</title>
      <link href="posts/51148.html"/>
      <url>posts/51148.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-哔哩哔哩插件部署代码"><a href="#1-哔哩哔哩插件部署代码" class="headerlink" title="1.哔哩哔哩插件部署代码"></a>1.哔哩哔哩插件部署代码</h1><blockquote><p>要在hexo g或者hexo deploy前执行</p><ol><li>更新数据 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo bangumi -u</span><br></pre></td></tr></table></figure></li><li>删除数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo bangumi -d</span><br></pre></td></tr></table></figure><h1 id="2-搜索引擎布置"><a href="#2-搜索引擎布置" class="headerlink" title="2.搜索引擎布置"></a>2.搜索引擎布置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo algolia</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算</title>
      <link href="posts/60366.html"/>
      <url>posts/60366.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-运算基础"><a href="#1-运算基础" class="headerlink" title="1.运算基础"></a>1.运算基础</h1><ul><li><code>&amp;</code><ul><li>按位与</li><li>如果两者都是1,则结果为1,否则为0</li></ul></li><li><code>|</code><ul><li>按位或</li><li>只要有一个为1,就为1</li></ul></li><li><code>^</code><ul><li>按位异或</li><li>两者进制相同为0,否则为1</li></ul></li><li><code>~</code><ul><li>取反</li></ul></li><li><code>&gt;&gt;</code><ul><li>右移</li><li>高位补0</li></ul></li><li><code>&lt;&lt;</code><ul><li>左移</li><li>右补0</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之枚举</title>
      <link href="posts/51148.html"/>
      <url>posts/51148.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-枚举是什么"><a href="#一-枚举是什么" class="headerlink" title="一.枚举是什么"></a>一.枚举是什么</h1><p>进行归纳推理的时候,考察每一种的情况,得出一般结论,这就为枚举</p><h1 id="二-枚举的算法例题"><a href="#二-枚举的算法例题" class="headerlink" title="二.枚举的算法例题"></a>二.枚举的算法例题</h1><h2 id="1-完美立方"><a href="#1-完美立方" class="headerlink" title="1.完美立方"></a>1.完美立方</h2><p>题目:</p><blockquote><p>费马大定理断言：当整数n&gt;2时，关于a，b，c的方程an=bn+cn没有正整数解。该定理被提出后，历经三百多年，经历多人猜想辩证，最终在1995年被英国数学家安德鲁·怀尔斯证明。当然，可以找到大于1的4个整数满足完美立方等式：a3=b3+c3+d3（例如12^3=6^3+8^3+10^3）。编写一个程序，对于任意给定的正整数N（N ≤100），寻找所有的四元组（a,b,c,d），满足a3=b3+c3+d3，其中1&lt;a，b，c，d≤N。</p></blockquote><p>输入:</p><p>一个整数N(N&lt;=100)</p><p>输出格式:</p><p>按照a的值从小到大，每行输出一个完美立方等式，其中b，c，d按照非降序排列输出。若两个完美立方等式中a的值相同，则b的值小的先输出；在b值相等的情况下，c值小的先输出；在b，c都相等的情况下，d值小的先输出。</p><p>输入输出实例:</p><p>输入 :24</p><p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cube &#x3D; 6, Triple &#x3D; (3,4,5)</span><br><span class="line">Cube &#x3D; 12, Triple &#x3D; (6,8,10)</span><br><span class="line">Cube &#x3D; 18, Triple &#x3D; (2,12,16)</span><br><span class="line">Cube &#x3D; 18, Triple &#x3D; (9,12,15)</span><br><span class="line">Cube &#x3D; 19, Triple &#x3D; (3,10,18)</span><br><span class="line">Cube &#x3D; 20, Triple &#x3D; (7,14,17)</span><br><span class="line">Cube &#x3D; 24, Triple &#x3D; (12,16,20)</span><br></pre></td></tr></table></figure><br>分析</p><p>通过对每一个数进行枚举,每一个数都要比前面一个数大才可以防止出现重复的情况</p><p>代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> a = <span class="number">2</span>; a &lt;= n; a++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b = <span class="number">2</span>; b &lt; a; b++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> c = b; c &lt; a; c++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> d = c; d &lt; a; d++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a*a*a == b*b*b + c*c*c + d*d*d)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Cube = &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;, &quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Triple = (&quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; c &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; d &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-生理周期"><a href="#2-生理周期" class="headerlink" title="2.生理周期"></a>2.生理周期</h2><p>题目</p><p>人生来就有三个生理周期，分别为体力、感情和智力周期，它们的周期长度为 2323 天、2828 天和 3333 天。每一个周期中有一天是高峰。在高峰这天，人会在相应的方面表现出色。例如，智力周期的高峰，人会思维敏捷，精力容易高度集中。因为三个周期的周长不同，所以通常三个周期的高峰不会落在同一天。对于每个人，我们想知道何时三个高峰落在同一天。对于每个周期，我们会给出从当前年份的第一天开始，到出现高峰的天数（不一定是第一次高峰出现的时间）。</p><p>你的任务是给定一个从当年第一天开始数的天数，输出从给定时间开始（不包括给定时间）下一次三个高峰落在同一天的时间（距给定时间的天数）。例如：给定时间为 1010，下次出现三个高峰同天的时间是 1212，则输出 22（注意这里不是 33）。</p><p>输入</p><p>一行，包含四个整数：p, e, ip,e,i 和 dd，相邻两个整数之间用单个空格隔开。p, e, ip,e,i 分别表示体力、情感和智力高峰出现的时间（时间从当年的第一天开始计算）。dd 是给定的时间，可能小于 p, e,p,e, 或 ii。 所有给定时间是非负的并且小于等于 365365，所求的时间小于等于 2125221252。</p><p>输出</p><p>一个整数，即从给定时间起，下一次三个高峰同天的时间（距离给定时间的天数）。</p><p>例如</p><p>输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 5 6 7</span><br></pre></td></tr></table></figure><br>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">16994</span><br></pre></td></tr></table></figure><br>分析:</p><p>通过题目可以从给定的时间开始一天一天遍历,但是这样显然很浪费时间,可以从给定的第一个周期的倍数来遍历,,找到符合第一个周期的数进行第二个周期的遍历,这样的遍历量会减少很多<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p, e, i, d;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; p &gt;&gt; e &gt;&gt; i &gt;&gt; d;</span><br><span class="line">    <span class="keyword">int</span> sum = d;</span><br><span class="line">    d++;</span><br><span class="line">    <span class="keyword">while</span> (d)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((d - p) % <span class="number">23</span> == <span class="number">0</span> &amp;&amp; (d - e) % <span class="number">28</span> == <span class="number">0</span> &amp;&amp; (d - i) % <span class="number">33</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; d - sum;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        d++;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(; (d - p) % <span class="number">23</span>; d++);</span><br><span class="line">    <span class="keyword">for</span>(; (d - e) % <span class="number">28</span>; d += <span class="number">23</span>);</span><br><span class="line">    <span class="keyword">for</span>(; (d - i) % <span class="number">33</span>; d += <span class="number">23</span> * <span class="number">28</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; d - sum;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-称硬币"><a href="#3-称硬币" class="headerlink" title="3.称硬币"></a>3.称硬币</h2><p><strong>题目</strong><br>有12枚硬币。其中有11枚真币和1枚假币。假币和真币重量不同， 但不知道假币比真币轻还是重。现在用一架天平称了这些币三次，告诉你称的结果，请你找出假币并且确定假币是轻是重（数据保证一能找出来）。<br><strong>输入</strong><br>第一行是测试数据组数。<br>每组数据有三行，每行表示一次称量的结果。银币标号为A-L。每次称量的结果用三个以空格隔开的字符串表示：天平左边放置的硬币，天平右边放置的硬币平衡状态。其中平衡状态用”up”,“down”,或”even”表示, 分别为右端高、右端低和平衡。天平左右的硬币数总是相等的。<br><strong>输入</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">ABCD EFGH even</span><br><span class="line">ABCI EFJK up</span><br><span class="line">ABIJ EFGH even</span><br></pre></td></tr></table></figure><br><strong>输出</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">K is the counterfeit coin and it is light.</span><br></pre></td></tr></table></figure><br><strong>思路</strong><br>可以将硬币从头开始遍历,对每一枚硬币进行轻重的判断.<br><strong>代码</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> Left[<span class="number">3</span>][<span class="number">7</span>];</span><br><span class="line"><span class="keyword">char</span> Right[<span class="number">3</span>][<span class="number">7</span>];</span><br><span class="line"><span class="keyword">char</span> res[<span class="number">3</span>][<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 </span></span><br><span class="line"><span class="comment">ABKD EKGH even </span></span><br><span class="line"><span class="comment">ABCI EFJH down </span></span><br><span class="line"><span class="comment">ABIJ EFGH even </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFake</span><span class="params">(<span class="keyword">char</span> ch, <span class="keyword">bool</span> flag)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>, s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">        x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(Left[i][x] != <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Left[i][x] == ch)&#123;</span><br><span class="line">                <span class="keyword">if</span>(flag)    </span><br><span class="line">                    l = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span>    </span><br><span class="line">                    l =<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line">        x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(Right[i][x] != <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Right[i][x] == ch)&#123;</span><br><span class="line">                <span class="keyword">if</span>(flag)    </span><br><span class="line">                    r = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span>    </span><br><span class="line">                    r =<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res[i][<span class="number">0</span>] == <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">            s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(res[i][<span class="number">0</span>] == <span class="string">&#x27;u&#x27;</span>)</span><br><span class="line">            s = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(res[i][<span class="number">0</span>] == <span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">            s = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(r - l != s)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; Left[i] &gt;&gt; Right[i] &gt;&gt; res[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> ch = <span class="string">&#x27;A&#x27;</span>; ch &lt;= <span class="string">&#x27;L&#x27;</span>; ch++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isFake(ch, <span class="literal">true</span>))&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="string">&quot; is the counterfeit coin and it is light.\n&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(isFake(ch, <span class="literal">false</span>))&#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ch &lt;&lt; <span class="string">&quot; is the counterfeit coin and it is heavy.\n&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-熄灯问题"><a href="#4-熄灯问题" class="headerlink" title="4.熄灯问题"></a>4.熄灯问题</h2><p><strong>题目</strong><br><a href="http://bailian.openjudge.cn/practice/2811/">http://bailian.openjudge.cn/practice/2811/</a><br><strong>样例输入</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0 1 1 0 1 0</span><br><span class="line">1 0 0 1 1 1</span><br><span class="line">0 0 1 0 0 1</span><br><span class="line">1 0 0 1 0 1</span><br><span class="line">0 1 1 1 0 0</span><br></pre></td></tr></table></figure><br><strong>样例输出</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 0 1 0 0 1</span><br><span class="line">1 1 0 1 0 1</span><br><span class="line">0 0 1 0 1 1</span><br><span class="line">1 0 0 1 0 0</span><br><span class="line">0 1 0 0 0 0</span><br></pre></td></tr></table></figure><br><strong>思路</strong><br>可以看出只要第一行确定了情况,接下来几排也都确定情况,只需遍历第一行的所有情况,而又可以从输入案例看出,我们可以进行位运算,将第一行作为二进制储存.<br><strong>获得每一行的每一位的数字</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetBit</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (c &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>储存每一行的二进制</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetBit</span><span class="params">(<span class="keyword">char</span> &amp; c, <span class="keyword">int</span> i ,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(v)&#123;</span><br><span class="line">        c |= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        c &amp;= ~(<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>翻转该位上的数</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FilpBit</span><span class="params">(<span class="keyword">char</span> &amp; c, <span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    c ^= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>代码</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> oriLights[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">char</span> ligths[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">char</span> result[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetBit</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (c &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetBit</span><span class="params">(<span class="keyword">char</span> &amp; c, <span class="keyword">int</span> i ,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(v)&#123;</span><br><span class="line">        c |= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        c &amp;= ~(<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FilpBit</span><span class="params">(<span class="keyword">char</span> &amp; c, <span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    c ^= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OutPut</span><span class="params">(<span class="keyword">char</span> result[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; GetBit(result[i], j);</span><br><span class="line">            <span class="keyword">if</span>( j &lt; <span class="number">5</span>)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> switchs;</span><br><span class="line">    <span class="comment">// int sum[5][6] = &#123;0&#125;;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> s;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">                SetBit(oriLights[i], j, s);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>  n = <span class="number">0</span>; n &lt; <span class="number">64</span>; n++)</span><br><span class="line">        &#123;</span><br><span class="line">            switchs = n;</span><br><span class="line">            <span class="built_in">memcpy</span>(ligths, oriLights, <span class="keyword">sizeof</span>(oriLights));</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">                result[i] = switchs;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span>  j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(GetBit(switchs, j))&#123;</span><br><span class="line">                        <span class="keyword">if</span>(j &gt; <span class="number">0</span>)</span><br><span class="line">                            FilpBit(ligths[i], j - <span class="number">1</span>);</span><br><span class="line">                        FilpBit(ligths[i], j);</span><br><span class="line">                        <span class="keyword">if</span>(j &lt; <span class="number">5</span>)</span><br><span class="line">                            FilpBit(ligths[i], j + <span class="number">1</span>);</span><br><span class="line">                    &#125;                   </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(i &lt; <span class="number">4</span>)</span><br><span class="line">                    ligths[i + <span class="number">1</span>] ^= switchs;</span><br><span class="line">                switchs = ligths[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ligths[<span class="number">4</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">                OutPut(result);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>枚举有些时候将问题细分,方便计算机枚举更少,但是更精准,加快执行速度</p>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
